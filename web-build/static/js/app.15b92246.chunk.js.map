{"version":3,"sources":["images/developer.jpg","components/Style.js","components/ValueStorageContext.js","components/about.js","APIs/Weather.js","APIs/YelpFusionLamda.js","components/search.js","components/display.js","App.js","index.js"],"names":["module","exports","styles","StyleSheet","create","container","padding","flex","title","fontSize","fontWeight","textAlign","subtitle","text","pic","width","height","borderRadius","splitscreen","flexDirection","backgroundColor","borderWidth","borderColor","justifyContent","ValueContext","createContext","ValueProvider","value","tag","children","useState","currentValue","setCurrentValue","useEffect","getData","a","async","AsyncStorage","getItem","jsonValue","data","console","log","JSON","parse","dir","Provider","setItem","stringify","useValue","useContext","About","View","style","containter","Text","Image","source","require","location","storeData","fetch","url","response","json","term","businesses","isClosed","is_closed","color","Search","weather","setWeather","activity","setActivity","setLoading","setError","tempLocation","setTempLocation","setLocation","tempTerm","setTempTerm","setTerm","getActivity","yelpAPI","x","error","Location","status","setErrorMsg","phoneLocation","coords","latitude","longitude","catch","err","weatherAPI","city","name","state","region","SafeAreaView","TextInput","placeholder","onChangeText","newText","Button","onPress","current","temp_f","temp_c","condition","FlatList","keyExtractor","index","id","renderItem","item","window","open","address1","uri","image_url","Tab","createBottomTabNavigator","MyTabs","Navigator","Screen","component","App","NavigationContainer","alignItems","email","registerRootComponent"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,uC,8HC4C1BC,EAvCFC,IAAWC,OAAO,CAC7BC,UAAU,CACRC,QAAS,GACTC,KAAM,GAGRC,MAAM,CACJC,SAAU,GACVC,WAAY,OACZC,UAAW,UAGbC,SAAS,CACPH,SAAU,GACVC,WAAY,OACZC,UAAW,UAGbE,KAAK,CACHJ,SAAU,IAGZK,IAAK,CACHC,MAAO,IACPC,OAAQ,IACRC,aAAc,IAGhBC,YAAa,CACXC,cAAe,MACfb,QAAS,GACTc,gBAAiB,UACjBC,YAAa,EACbC,YAAa,QACbL,aAAc,GACdM,eAAgB,kB,gDClChBC,EAAeC,wBAAc,MA2CpBC,EAzCO,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,SAClC,EAAuCC,mBAASH,GAAhD,WAAOI,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WAAOC,MAAY,IAE7B,IAAMA,EAAU,4BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGcE,IAAaC,QAAQV,IAHnC,OAGJW,EAHI,OAINC,EAAO,KACI,MAAXD,GACFE,QAAQC,IAAI,+BAA+BH,GAC3CC,EAAOG,KAAKC,MAAML,GAClBP,EAAgBQ,KAEhBC,QAAQC,IAAI,uCACZV,EAAgBL,IAXR,gDAcVc,QAAQI,IAAR,MAdU,iEA6BhB,OACE,cAACrB,EAAasB,SAAd,CACInB,MAAO,CAACI,eAAaC,gBAbT,SAAOL,GAAP,SAAAQ,EAAAC,OAAA,gEAEZK,QAAQC,IAAI,gBACZV,EAAgBL,GAHJ,WAAAQ,EAAA,MAINE,IAAaU,QAAQnB,EAAKe,KAAKK,UAAUrB,KAJnC,uDAMZc,QAAQI,IAAR,MANY,kEAYhB,SAEGhB,KAKMoB,EAAW,kBAAMC,qBAAW1B,ICuB1B2B,EA9DD,WAEZ,IAAOpB,EAAgBkB,IAAhBlB,aAGP,OACE,eAACqB,EAAA,EAAD,CAAMC,MAASnD,EAAOoD,WAAtB,UACE,cAACC,EAAA,EAAD,CAAMF,MAASnD,EAAOM,MAAtB,qBACA,cAAC+C,EAAA,EAAD,CAAMF,MAASnD,EAAOU,SAAtB,iCAEA,eAACwC,EAAA,EAAD,CAAMC,MAASnD,EAAOgB,YAAtB,UACA,cAACsC,EAAA,EAAD,CACEH,MAAOnD,EAAOY,IACd2C,OAAQC,EAAQ,OAGlB,cAACH,EAAA,EAAD,CAAMF,MAASnD,EAAOW,KAAtB,2KAOD,cAAC0C,EAAA,EAAD,CAAMF,MAASnD,EAAOW,KAAtB,2LAIA,eAAC0C,EAAA,EAAD,8BAAuBZ,KAAKK,UAAUjB,GAAtC,W,+CCzBUG,MARf,SAAuByB,EAAUC,GAAjC,iBAAAzB,EAAAC,OAAA,uDACIK,QAAQC,IAAI,iBADhB,WAAAP,EAAA,MAE2B0B,MAAMC,oFAAqCH,EAAS,YAF/E,cAEUI,EAFV,kBAAA5B,EAAA,MAGuB4B,EAASC,QAHhC,OAGUA,EAHV,OAKIJ,EAAUI,GALd,6DCQe9B,MAPf,SAAwByB,EAAUM,EAAML,GAAxC,mBAAAzB,EAAAC,OAAA,kEAAAD,EAAA,MAC2B0B,MAAMC,uEAAoBH,EAAW,SAAWM,IAD3E,cACUF,EADV,kBAAA5B,EAAA,MAEuB4B,EAASC,QAFhC,OAEUA,EAFV,OAGUxB,EAAOwB,EAAKE,WAClBN,EAAUpB,GAJd,6DC2JA,SAAS2B,EAASC,GACd,OAAIA,EAEI,cAACb,EAAA,EAAD,CAAMF,MAAS,CAACgB,MAAO,OAAvB,oBAKA,cAACd,EAAA,EAAD,CAAMF,MAAS,CAACgB,MAAO,SAAvB,kBAUGC,MAlKA,WAAO,IAAD,QAEjB,EAA8BxC,mBAAS,IAAvC,WAAOyC,EAAP,KAAgBC,EAAhB,KACA,EAAgC1C,mBAAS,IAAzC,WAAO2C,EAAP,KAAiBC,EAAjB,KAGA,EAAgC5C,oBAAS,GAAzC,WAAkB6C,GAAlB,WACA,EAA0B7C,oBAAS,GAAnC,WAAc8C,GAAd,WAGA,EAAwC9C,mBAAS,IAAjD,WAAO+C,EAAP,KAAqBC,EAArB,KACA,EAAgChD,mBAAS,WAAzC,WAAO6B,EAAP,KAAiBoB,EAAjB,KAGA,EAAgCjD,mBAAS,IAAzC,WAAOkD,EAAP,KAAiBC,EAAjB,KACA,EAAwBnD,mBAAS,QAAjC,WAAOmC,EAAP,KAAaiB,EAAb,KAEA,EAAuCjC,IAAnBjB,GAApB,EAAOD,aAAP,EAAoBC,iBAkBdmD,EAAc,oBAAAhD,EAAAC,OAAA,gDAChB,IACIK,QAAQC,IAAI,0BACZiC,GAAW,GACXS,EAAQzB,EAAUM,GAAO,SAAAoB,GAAC,OAAEX,EAAYW,MACxC5C,QAAQC,IAAI,gBACZkC,GAAS,GACX,MAAOU,GACL7C,QAAQ6C,MAAMA,GACdV,GAAS,GARb,QAUID,GAAW,GAXC,6DAsCpB,OAtBA1C,qBAAU,YACN,WAAC,iBAAAE,EAAAC,OAAA,kEAAAD,EAAA,MACwBoD,OADxB,mBAEgB,YAFhB,EACOC,OADP,uBAGGC,YAAY,4CAHf,4CAAAtD,EAAA,MAO2BoD,IAAiC,KAP5D,OAOKG,EAPL,OAQCjD,QAAQC,IAAIgD,GACZX,EAAYW,EAAcC,OAAOC,SAAW,IAAMF,EAAcC,OAAOE,WATxE,8DAAD,GAUKC,OAAM,SAAAC,GAAG,OAAItD,QAAQ6C,MAAM,yBAA0BS,QAE1D,IAEJ9D,qBAAU,WA/CS,EAAAE,EAAAC,OAAA,gDACf,IACIK,QAAQC,IAAI,yBACZiC,GAAW,GACXqB,EAAWrC,GAAW,SAAA0B,GAAC,OAAEb,EAAWa,MACpC5C,QAAQC,IAAI,wBACZD,QAAQC,IAAIC,KAAKK,UAAUuB,IAC3BK,GAAS,GACX,MAAOU,GACL7C,QAAQ6C,MAAMA,GACdV,GAAS,GATb,QAWID,GAAW,GAZA,8DA+Cc,CAAChB,IAElC1B,qBAAU,WAAOkD,MAAgB,CAAClB,IAClChC,qBAAU,WAAOkD,MAAgB,CAACxB,IAElC1B,qBAAU,WAAO,IAAD,IAACD,EAAgB,CAACiE,KAAI,SAAE1B,EAAQZ,eAAV,EAAE,EAAkBuC,KAAMC,MAAK,SAAE5B,EAAQZ,eAAV,EAAE,EAAkByC,WAAW,CAAC7B,IAIjG,eAAC8B,EAAA,EAAD,CAAchD,MAASnD,EAAOG,UAA9B,UACI,cAACkD,EAAA,EAAD,CAAMF,MAASnD,EAAOM,MAAtB,kCAEA,cAAC+C,EAAA,EAAD,mDACA,cAAC+C,EAAA,EAAD,CACIC,YAAY,sBACZC,aACI,SAAAC,GAAO,OAAI3B,EAAgB2B,MAInC,cAACC,EAAA,EAAD,CACIlG,MAAM,SACNmG,QAAS,WACL5B,EAAYF,MAQpB,cAACtB,EAAA,EAAD,oDACA,cAAC+C,EAAA,EAAD,CACIC,YAAY,oBACZC,aACI,SAAAC,GAAO,OAAIxB,EAAYwB,MAI/B,cAACC,EAAA,EAAD,CACIlG,MAAM,SACNmG,QAAS,WACLzB,EAAQF,MAGf,eAACzB,EAAA,EAAD,iBAAUZ,KAAKK,UAAL,SAAeuB,EAAQZ,eAAvB,EAAe,EAAkBuC,MAA3C,oBAAmEvD,KAAKK,UAAL,SAAeuB,EAAQqC,cAAvB,EAAe,EAAiBC,QAAnG,WAAiHlE,KAAKK,UAAL,SAAeuB,EAAQqC,cAAvB,EAAe,EAAiBE,QAAjJ,eAAmKnE,KAAKK,UAAL,SAAeuB,EAAQqC,cAAvB,EAAe,EAAiBG,UAAUlG,SAC7M4B,QAAQC,IAAI,oBAEb,cAACsE,EAAA,EAAD,CACIxE,KAAMiC,EACNwC,aAAc,WAASC,GAAT,SAAGC,IACjBC,WAAY,gBAAGC,EAAH,EAAGA,KAAH,OAER,eAAChB,EAAA,EAAD,CAAchD,MAASnD,EAAOgB,YAA9B,UACI,eAACkC,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,CAAMoD,QAAS,kBAAMW,OAAOC,KAAKF,EAAKvD,MAAMT,MAAS,CAACgB,MAAO,QAA7D,SAAuEgD,EAAKnB,OAC5E,eAAC3C,EAAA,EAAD,WAAO8D,EAAK1D,SAAS6D,SAArB,OACA,eAACjE,EAAA,EAAD,eAAQ8D,EAAK1D,SAASsC,KAAtB,IAA6BoB,EAAK1D,SAASwC,SAC1ChC,EAASkD,EAAKlD,aAKnB,cAACX,EAAA,EAAD,CACIH,MAAOnD,EAAOY,IACd2C,OAAQ,CAACgE,IAAKJ,EAAKK,uB,kBC5IzCC,EAAMC,cAEZ,SAASC,IACP,OACE,eAACF,EAAIG,UAAL,WACE,cAACH,EAAII,OAAL,CAAY7B,KAAK,SAAS8B,UAAW1D,IACrC,cAACqD,EAAII,OAAL,CAAY7B,KAAK,QAAQ8B,UAAW7E,OAK3B,SAAS8E,IACtB,OACE,cAACC,EAAA,EAAD,UACE,cAACL,EAAD,MAKS1H,IAAWC,OAAO,CAC/BC,UAAW,CACTE,KAAM,EACNa,gBAAiB,OACjB+G,WAAY,SACZ5G,eAAgB,YALpB,ICvBIiB,EAAO,CAACyD,KAAM,UAClBE,MAAO,KACPiC,MAAO,uBCCPC,aDEe,WACb,OACE,cAAC,EAAD,CAAe1G,MAAOa,EAAMZ,IAAI,WAAhC,SACE,cAAC,EAAD,W","file":"static/js/app.15b92246.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/developer.6dd8ecdc.jpg\";","import {StyleSheet} from 'react-native';\r\n\r\n// Styling used for the entire project\r\n// Used to keep styling consistent\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n      padding: 24,\r\n      flex: 1\r\n    },\r\n  \r\n    title:{\r\n      fontSize: 32,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n    },\r\n\r\n    subtitle:{\r\n      fontSize: 24,\r\n      fontWeight: 'bold',\r\n      textAlign: 'center',\r\n    },\r\n  \r\n    text:{\r\n      fontSize: 16,\r\n    },\r\n  \r\n    pic: {\r\n      width: 100,\r\n      height: 100,\r\n      borderRadius: 30,\r\n    },\r\n  \r\n    splitscreen: {\r\n      flexDirection: 'row',\r\n      padding: 10,\r\n      backgroundColor: '#add8e6',\r\n      borderWidth: 1,\r\n      borderColor: 'black',\r\n      borderRadius: 20,\r\n      justifyContent: 'space-evenly',\r\n    }\r\n  });\r\n\r\n  export default styles;","/*\r\n  ValueStorageContext this adds async storage to valueContext\r\n*/\r\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nconst ValueContext = createContext(null)\r\n\r\nconst ValueProvider = ({value, tag, children}) => {\r\n  const [currentValue,setCurrentValue] = useState(value);\r\n\r\n  useEffect(() => {getData();},[]) // init currentValue with AsyncStorage\r\n\r\n  const getData = async () => \r\n    {\r\n      try {\r\n        const jsonValue = await AsyncStorage.getItem(tag)\r\n        let data = null\r\n        if (jsonValue!=null) {\r\n          console.log('just retrieved jsonValue as '+jsonValue)\r\n          data = JSON.parse(jsonValue);\r\n          setCurrentValue(data)\r\n        } else {\r\n          console.log('retrieved null, using default value')\r\n          setCurrentValue(value)  \r\n        }\r\n      } catch(e) {\r\n        console.dir(e)\r\n      }\r\n  }\r\n\r\n  const storeData = async (value) => {\r\n      try {\r\n        console.log('in storeData');\r\n        setCurrentValue(value);\r\n        await AsyncStorage.setItem(tag, JSON.stringify(value));\r\n      } catch (e) {\r\n        console.dir(e)\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <ValueContext.Provider\r\n        value={{currentValue,setCurrentValue:storeData}} >\r\n      {children}\r\n    </ValueContext.Provider>\r\n   )\r\n}\r\nexport default ValueProvider\r\nexport const useValue = () => useContext(ValueContext)\r\n","// About the developer page\r\n\r\n// Import react native\r\nimport React from 'react';\r\nimport { View,  Button, StyleSheet, Text, Image} from 'react-native';\r\n// import {sendFeedback} from './Feedback';\r\n\r\n// Import from components\r\nimport styles from './Style';\r\nimport { useValue } from './ValueStorageContext';\r\n\r\nconst About = () => {\r\n\r\n  const {currentValue} = useValue();\r\n  // const [feedback,setFeedback] = useState(\"\");\r\n\r\n  return (\r\n    <View style = {styles.containter}>\r\n      <Text style = {styles.title}>Eric Hu</Text>\r\n      <Text style = {styles.subtitle}>erichu@brandeis.edu</Text>\r\n\r\n      <View style = {styles.splitscreen}>\r\n      <Image\r\n        style={styles.pic}\r\n        source={require('../images/developer.jpg')}\r\n      />\r\n \r\n      <Text style = {styles.text}>\r\n      Im a rising senior at Brandeis University \r\n      studying Computer Science \r\n      and minoring in Asian American Pacific Islander Studies and Film and Interactive Media\r\n      </Text>\r\n      </View>\r\n      \r\n     <Text style = {styles.text}>\r\n     This application ask for the user's location (or they can enter it themselves) and shows fun activities and resturants around the user's location or at the searched location\r\n     </Text>\r\n      \r\n     <Text> currentValue = {JSON.stringify(currentValue)} </Text>\r\n      \r\n     {/* \r\n     Feedback\r\n     <View>\r\n            \r\n            <View style={{flexDirection:'row',justifyContent:'center'}}>\r\n                <TouchableOpacity\r\n                    title=\"send feedback\"\r\n                    style={{fontSize:10}}\r\n                    onPress = {() => {\r\n                        console.log('sending feedback....');\r\n                        sendFeedback(feedback);\r\n                        setFeedback(\"\")}}\r\n                    >\r\n                    <Text>send feedback</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            <TextInput \r\n               multiline\r\n               numberOfLines={2}\r\n               placeholder=\"feedback\"\r\n               style={{backgroundColor:'lightgreen'}}\r\n               onChangeText = {(text) => setFeedback(text)}\r\n               value={feedback}\r\n            />\r\n\r\n        </View> */}\r\n    </View>\r\n\r\n    \r\n    \r\n  );\r\n}\r\n\r\nexport default About;\t","// Getting data from WeatherAPI\r\n\r\nconst weatherAPIKey = 'dab7f57ce9c6486e983182326211606'\r\nconst url = \"https://api.weatherapi.com/v1/current.json?\"\r\n\r\nasync function getData(location, storeData){\r\n    console.log(\"In WeatherAPI\")\r\n    const response = await fetch(url + \"key=\" + weatherAPIKey + \"&q=\"+location+\"&aqi=no\");\r\n    const json = await response.json();\r\n    //console.log(JSON.stringify(json))\r\n    storeData(json);\r\n}\r\n\r\nexport default getData;\r\n\r\n","// Getting data from Yelp Fusion API\r\n// Huge thanks to ProductionCoder for creating a lamda function to get easy access to yelp data\r\n// Find him here: https://www.youtube.com/watch?v=TtctqhLzfDo\r\n\r\nconst url = \"https://yelp-backend.netlify.app/.netlify/functions/search?\"\r\n\r\nasync function getData (location, term, storeData){\r\n    const response = await fetch(url + \"location=\" + location + \"&term=\" + term);\r\n    const json = await response.json();\r\n    const data = json.businesses;\r\n    storeData(data); // Setting the resturant data\r\n}\r\n\r\nexport default getData;\r\n\r\n// Previous code, need CORS to work\r\n\r\n//const yelpFustionAPIKey = 'dobn60rTc2HtHN-N6qf5EQUd2fiKCrW4KOCYJPJKfWh6r9zlZ-VENmJDyTRjl3NAN5ZOgbsU3LWk7K8Q420YsV6YlYJ8wgobns1Puy3l8EXi45tEwZWrq99riFqzYnYx'\r\n\r\n// Get resturants, code taken from postman\r\n// const getResturants = async () => {\r\n//     var myHeaders = new Headers();\r\n//     myHeaders.append(\"Authorization\", \"Bearer \" + yelpFustionAPIKey);\r\n\r\n//     var requestOptions = {\r\n//     method: 'GET',\r\n//     headers: myHeaders,\r\n//     redirect: 'follow'\r\n//     };\r\n\r\n//     try{\r\n//     const response = await fetch(\"https://api.yelp.com/v3/businesses/search?latitude=\" + latitude + \"&longitude=\" + longitude, requestOptions)\r\n//     .then(response => response.text())\r\n//     .then(result => console.log(result))\r\n//     .catch(error => console.log('error', error));\r\n\r\n//     const json = await response.json();\r\n//     setResturants(json); // Setting the resturant data\r\n//     setError(false)\r\n\r\n//     }catch (error) {\r\n//         console.error(error);\r\n//         setError(true)\r\n//     } finally {\r\n//         setLoading(false);\r\n//     }\r\n// }","// Import react elements\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Text, View, TextInput, ActivityIndicator, FlatList, Button, SafeAreaView, Image } from 'react-native';\r\nimport { Linking} from 'react-native'\r\n\r\n// Import Expo elements\r\nimport * as Location from 'expo-location'; // Used to ask user for location\r\n\r\n// Import components\r\nimport styles from './Style';\r\nimport searchFunctions from './SearchFunctions'\r\nimport {useValue} from './ValueStorageContext'\r\n\r\n// API calls\r\nimport weatherAPI from '../APIs/Weather'\r\nimport yelpAPI from '../APIs/YelpFusionLamda'\r\n\r\nconst Search = () => {\r\n    // API data\r\n    const [weather, setWeather] = useState([])\r\n    const [activity, setActivity] = useState([])\r\n\r\n    // Loading and error checking for the api\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    \r\n    // tempLocation allows user to type, while location is what is searched\r\n    const [tempLocation, setTempLocation] = useState([])\r\n    const [location, setLocation] = useState('waltham')\r\n\r\n    // tempterm allows user to type, while term is what is searched\r\n    const [tempTerm, setTempTerm] = useState([])\r\n    const [term, setTerm] = useState('food')\r\n\r\n    const {currentValue,setCurrentValue} = useValue();\r\n\r\n    const getWeather = async () => {\r\n        try {\r\n            console.log(\"trying to set weather\")\r\n            setLoading(true)\r\n            weatherAPI(location, (x=>setWeather(x)))\r\n            console.log(\"Weather properly set\")\r\n            console.log(JSON.stringify(weather))\r\n            setError(false)\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError(true)\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const getActivity = async () => {\r\n        try {\r\n            console.log(\"trying to set activity\")\r\n            setLoading(true)\r\n            yelpAPI(location, term ,(x=>setActivity(x)))\r\n            console.log(\"activity set\")\r\n            setError(false)\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError(true)\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    // Ask user for location\r\n    useEffect(() => {\r\n        (async () => {\r\n          let { status } = await Location.requestForegroundPermissionsAsync();\r\n          if (status !== 'granted') {\r\n            setErrorMsg('Permission to access location was denied');\r\n            return;\r\n          }\r\n    \r\n          let phoneLocation = await Location.getCurrentPositionAsync({});\r\n          console.log(phoneLocation);\r\n          setLocation(phoneLocation.coords.latitude + \",\" + phoneLocation.coords.longitude)\r\n        })().catch(err => console.error(\"user denied permission\", err)) // In case user denies permission\r\n      }\r\n      , []);\r\n\r\n    useEffect(() => {getWeather() }, [location]) // Update weather when location is changed\r\n\r\n    useEffect(() => {getActivity()}, [term]) // Update activity when term is changed\r\n    useEffect(() => {getActivity()}, [location]) // Update activity when location is changed\r\n\r\n    useEffect(() => {setCurrentValue({city: weather.location?.name, state: weather.location?.region})}, [weather]) // Update activity when weather is changed\r\n    \r\n    return (\r\n\r\n        <SafeAreaView style = {styles.container}>\r\n            <Text style = {styles.title}>Welcome to Explorer!</Text>\r\n            {/* <Text> currentValue = {JSON.stringify(currentValue)} </Text> */}\r\n            <Text>Enter a location to find the weather</Text>\r\n            <TextInput\r\n                placeholder=\"Enter your location\"\r\n                onChangeText={\r\n                    newText => setTempLocation(newText)\r\n                }\r\n            />\r\n\r\n            <Button\r\n                title=\"Search\"\r\n                onPress={() => {\r\n                    setLocation(tempLocation);\r\n                }}\r\n            />\r\n\r\n            \r\n            {/* <Text>{location}</Text> */}\r\n           \r\n            {/* <Text> {JSON.stringify(weather)} </Text> */}\r\n            <Text>Enter a activity you would like to do</Text>\r\n            <TextInput\r\n                placeholder=\"Enter an activity\"\r\n                onChangeText={\r\n                    newText => setTempTerm(newText)\r\n                }\r\n            />\r\n\r\n            <Button\r\n                title=\"Search\"\r\n                onPress={() => {\r\n                    setTerm(tempTerm);\r\n                }}\r\n            />\r\n             <Text>In {JSON.stringify(weather.location?.name)}, it's currently {JSON.stringify(weather.current?.temp_f)} °F ({JSON.stringify(weather.current?.temp_c)} °C) and {JSON.stringify(weather.current?.condition.text)}</Text>\r\n            {console.log(\"Display Flatlist\")}\r\n            \r\n            <FlatList\r\n                data={activity}\r\n                keyExtractor={({ id }, index) => id}\r\n                renderItem={({ item }) => (\r\n                    // Safe view to show image on right\r\n                    <SafeAreaView style = {styles.splitscreen}>\r\n                        <View>\r\n                            <Text onPress={() => window.open(item.url)} style = {{color: 'blue'}}>{item.name}</Text>\r\n                            <Text>{item.location.address1} </Text>\r\n                            <Text> {item.location.city} {item.location.state}</Text>\r\n                            {isClosed(item.isClosed)}\r\n                            \r\n                        </View>\r\n                            \r\n\r\n                        <Image \r\n                            style={styles.pic}\r\n                            source={{uri: item.image_url}} \r\n                        />\r\n                    </SafeAreaView>\r\n                    \r\n                )}\r\n            /> \r\n            \r\n\r\n            {/* <Text>{JSON.stringify(activity)}</Text> */}\r\n        </SafeAreaView>\r\n    )\r\n}\r\n\r\nfunction isClosed(is_closed){\r\n    if (is_closed){ // Activity is currently open\r\n        return(\r\n            <Text style = {{color: 'red'}}>CLOSED</Text>\r\n        )\r\n    }\r\n    else{\r\n        return( // Activity is currently closed\r\n            <Text style = {{color: 'green'}}>OPEN</Text>\r\n        )\r\n    }\r\n} \r\n\r\n// const webBrowser = async (url) => {\r\n//     await Linking.canOpenURL(url);\r\n//     Linking.openURL(url).catch(err => console.error(\"Couldn't load page\", err));\r\n// }\r\n\r\nexport default Search","import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport About from './about'\r\nimport Search from './search'\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nfunction MyTabs() {\r\n  return (\r\n    <Tab.Navigator>\r\n      <Tab.Screen name=\"Search\" component={Search} />\r\n      <Tab.Screen name=\"About\" component={About} />\r\n    </Tab.Navigator>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <MyTabs />\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});","import Display from './components/display'\r\nimport React from 'react';\r\nimport ValueProvider from './components/ValueStorageContext';\r\n\r\nlet data = {city: 'Waltham',\r\nstate: 'MA',\r\nemail: 'erichu@brandeis.edu'\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <ValueProvider value={data} tag=\"explorer\">\r\n      <Display/>\r\n    </ValueProvider>\r\n    \r\n  );\r\n}\r\n\r\n","import { registerRootComponent } from 'expo';\r\n\r\nimport App from './App';\r\n\r\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\r\n// It also ensures that whether you load the app in Expo Go or in a native build,\r\n// the environment is set up appropriately\r\nregisterRootComponent(App);\r\n"],"sourceRoot":""}